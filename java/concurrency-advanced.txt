Semaphore - A Semaphore is a thread synchronization construct that can be used either to send signals between threads to avoid missed signals, or to guard a critical section like you would with a lock.
For example : 
public class Semaphore {
  private boolean signal = false;

  public synchronized void take() {
    this.signal = true;
    this.notify();
  }

  public synchronized void release() throws InterruptedException{
    while(!this.signal) wait();
    this.signal = false;
  }

}

Throttling Task Submission Rate with ThreadPoolExecutor and Semaphore
We can create a CustomThreadPoolExecutor with following capabilities :
1) Tasks being submitted to blocking queue
2) An executor which picks up the task from queue and execute them
3) Overridden beforeExecute() and afterExecute() methods to perform some extra activities if needed
4) Attached a RejectedExecutionHandler which handle the task if it got rejected because the queue was full

This can handle most of the practical scenarios but can implement throttling of task submission in queue. Throttling will keep the number of tasks in queue in limit so that no task get rejected. It will remove the necessity of RejectedExecutionHandler.


Executor Framework
Creating a thread in java is a very expensive process which includes memory overhead also. So, it’s a good idea if we can re-use these threads once created, to run our future runnables.
We can extend ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler); to implement custom executors. The executor.submit() method returns a Future<> object which has methods like future.isDone(), future.isCancelled(), future.get().

Deadlock - It is a situation where minimum two threads are holding the lock on some different resource, and both are waiting for other’s resource to complete its task. And, none is able to leave the lock on the resource it is holding.
Simple solution is to acquire the resources in same order in all the threads.

Types of Executors - FixedThreadPool (LinkedBlockingQueue), WorkStealingPool (ForkJoinPool, ForkJoinTask), SingleThreadedExecutor (LinkedBlockingQueue), CachedThreadPool (SynchronousQueue), ScheduledExecutorService ScheduledThreadPool